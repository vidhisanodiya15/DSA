class Solution {
public:
    void create_adj(unordered_map<int, vector<pair<int, int>>> &adj, vector<vector<int>> &times){
        
        for(auto vec : times){
            int src = vec[0];
            int des = vec[1];
            int w =   vec[2];
            
            adj[src].push_back({des , w});
           
        }
    }
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        unordered_map<int, vector<pair<int,int>>>adj;
        create_adj(adj, times);
        
        vector<int> dist(n+1,INT_MAX);
        dist[k]= 0;
        priority_queue<pair<int,int>,vector<pair<int,int>> , greater<pair<int,int>>> pq;
        
        pq.push({0,k});
        
        while(!pq.empty()){
            int u = pq.top().second;
            int curr_dist = pq.top().first;
            pq.pop();
            if(curr_dist > dist[u]) continue;
             for(pair<int,int>  neigh : adj[u]){
                int v = neigh.first;
                int w = neigh.second;
                if(dist[u] +  w < dist[v]){
                    dist[v] = dist[u]+w;
                    pq.push({dist[v] , v});
                }
            }
        }
            int Time = 0;
            for(int i=1;i<=n;i++){
                if(dist[i] == INT_MAX) return -1;
                Time = max(Time,dist[i]);
            }
            return Time;
        
    }
    
};
