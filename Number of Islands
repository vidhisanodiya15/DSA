class Solution {
public:

    int count;
    void dfs(int i, int j, vector<vector<char>>& grid, int &m, int &n){
        if(i<0 || j<0 || i>=m || j>=n)return;
        if(grid[i][j] == '2' || grid[i][j] == '0')return;
        grid[i][j] = '2';

        dfs(i, j-1,grid,m,n); // left
        dfs(i,j+1,grid,m,n);// right
        dfs(i-1,j,grid,m,n); //top
        dfs(i+1,j,grid,m,n);// bottom
    }
    int numIslands(vector<vector<char>>& grid) {
        int m= grid.size();
        int n = grid[0].size();
        count =0;

        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j] == '1'){
                    dfs(i,j,grid,m,n);
                    count++;
                }
            }
        }
        return count;
       



    }
};
